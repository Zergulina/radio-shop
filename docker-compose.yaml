version: '3.0.0'
services:
  api-gateway:
      build: ./ApiGateway
      container_name: ${API_GATEWAY_HOST}
      ports:
        - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
      environment:
        - HTTP_PORTS=${API_GATEWAY_PORT}
        - AUTH_HOST=${AUTH_HOST}
        - AUTH_PORT=${AUTH_PORT}
        - HOST=${API_GATEWAY_HOST}
        - PORT=${API_GATEWAY_PORT}
      depends_on:
        - auth-service
        - catalog-service
        - cart-service
        - image-service
        - order-service
        - rating-service
  rabbitmq:
    image: rabbitmq:management
    container_name: ${RABBITMQ_HOST}
    expose:
      - ${RABBITMQ_PORT}
    ports:
      - "${RABBITMQ_WEB_PORT}:${RABBITMQ_WEB_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
  auth-service:
    build: ./AuthService
    container_name: ${AUTH_HOST}
    expose:
      - ${AUTH_PORT}
    environment:
      - ConnectionStrings__DefaultConnection=Host=${AUTH_DB_HOST};Port=${AUTH_DB_PORT};Database=${AUTH_DB_NAME};Username=${AUTH_DB_USER};Password=${AUTH_DB_PASSWORD}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${AUTH_PORT}
      - HTTP_2_PORTS=${AUTH_PORT_HTTP_2}
      - Admin__UserName=${ADMIN_USER_NAME}
      - Admin__Password=${ADMIN_PASSWORD}
      - Admin__FirstName=${ADMIN_FIRST_NAME}
      - Admin__LastName=${ADMIN_LAST_NAME}
      - Admin__MiddleName=${ADMIN_MIDDLE_NAME}
      - Admin__Email=${ADMIN_EMAIL}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
    depends_on:
      auth-db:
        condition: service_healthy
  auth-db:
    image: postgres:17
    container_name: ${AUTH_DB_HOST}
    environment:
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_DB=${AUTH_DB_NAME}
    ports:
      - 5435:${AUTH_DB_PORT}
    expose:
      - ${AUTH_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  catalog-service:
    build: ./CatalogService
    container_name: ${CATALOG_HOST}
    expose:
      - ${CATALOG_PORT}
    environment:
      - ConnectionStrings__DefaultConnection=Host=${CATALOG_DB_HOST};Port=${CATALOG_DB_PORT};Database=${CATALOG_DB_NAME};Username=${CATALOG_DB_USER};Password=${CATALOG_DB_PASSWORD}
      - ConnectionStrings__ProductImageServiceGrpcConnection=http://${IMAGE_HOST}:${IMAGE_PORT_HTTP_2}
      - ConnectionStrings__RabbitMQ=rabbitmq://${RABBITMQ_HOST}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${CATALOG_PORT}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
      - PgPublication__Name=catalog_publication
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    depends_on:
      catalog-db:
        condition: service_healthy
      image-service:
        condition: service_started
      rabbitmq:
        condition: service_started
  catalog-db:
    image: postgres:17
    container_name: ${CATALOG_DB_HOST}
    environment:
      - POSTGRES_USER=${CATALOG_DB_USER}
      - POSTGRES_PASSWORD=${CATALOG_DB_PASSWORD}
      - POSTGRES_DB=${CATALOG_DB_NAME}
    expose:
      - ${CATALOG_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CATALOG_DB_USER} -d ${CATALOG_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./catalog-db/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
  cart-service:
    build: ./CartService
    container_name: ${CART_HOST}
    expose:
      - ${CART_PORT}
    environment:
      - ConnectionStrings__DefaultConnection=Host=${CART_DB_HOST};Port=${CART_DB_PORT};Database=${CART_DB_NAME};Username=${CART_DB_USER};Password=${CART_DB_PASSWORD}
      - ConnectionStrings__UserServiceGrpcConnection=http://${AUTH_HOST}:${AUTH_PORT_HTTP_2}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${CART_PORT}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
      - PgSubscription__Name=catalog_subscription
      - PgSubscription__Connection=dbname=${CATALOG_DB_NAME} host=${CATALOG_DB_HOST} user=${CATALOG_DB_USER} password=${CATALOG_DB_PASSWORD}
      - PgSubscription__PublicationName=catalog_publication
    depends_on:
      cart-db:
        condition: service_healthy
  cart-db:
    image: postgres:17
    container_name: ${CART_DB_HOST}
    environment:
      - POSTGRES_USER=${CART_DB_USER}
      - POSTGRES_PASSWORD=${CART_DB_PASSWORD}
      - POSTGRES_DB=${CART_DB_NAME}
    expose: 
      - ${CART_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CART_DB_USER} -d ${CART_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - catalog-service
  order-service:
    build: ./OrderService
    container_name: ${ORDER_HOST}
    expose:
      - ${ORDER_PORT}
    environment:
      - ConnectionStrings__DefaultConnection=Host=${ORDER_DB_HOST};Port=${ORDER_DB_PORT};Database=${ORDER_DB_NAME};Username=${ORDER_DB_USER};Password=${ORDER_DB_PASSWORD}
      - ConnectionStrings__UserServiceGrpcConnection=http://${AUTH_HOST}:${AUTH_PORT_HTTP_2}
      - ConnectionStrings__RabbitMQ=rabbitmq://${RABBITMQ_HOST}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${ORDER_PORT}
      - HTTP_2_PORTS=${ORDER_PORT_HTTP_2}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
      - PgSubscription__Name=catalog_subscription
      - PgSubscription__Connection=dbname=${CATALOG_DB_NAME} host=${CATALOG_DB_HOST} user=${CATALOG_DB_USER} password=${CATALOG_DB_PASSWORD}
      - PgSubscription__PublicationName=catalog_publication
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    depends_on:
      order-db:
        condition: service_healthy
  order-db:
    image: postgres:17
    container_name: ${ORDER_DB_HOST}
    environment:
      - POSTGRES_USER=${ORDER_DB_USER}
      - POSTGRES_PASSWORD=${ORDER_DB_PASSWORD}
      - POSTGRES_DB=${ORDER_DB_NAME}
    expose: 
      - ${ORDER_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ORDER_DB_USER} -d ${ORDER_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - catalog-service
  rating-service:
    build: ./RatingService
    container_name: ${RATING_HOST}
    expose:
      - ${RATING_PORT}
    environment:
      - ConnectionStrings__DefaultConnection=Host=${RATING_DB_HOST};Port=${RATING_DB_PORT};Database=${RATING_DB_NAME};Username=${RATING_DB_USER};Password=${RATING_DB_PASSWORD}
      - ConnectionStrings__UserServiceGrpcConnection=http://${AUTH_HOST}:${AUTH_PORT_HTTP_2}
      - ConnectionStrings__OrderServiceGrpcConnection=http://${ORDER_HOST}:${ORDER_PORT_HTTP_2}
      - ConnectionStrings__RabbitMQ=rabbitmq://${RABBITMQ_HOST}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${RATING_PORT}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
      - PgSubscription__Name=catalog_subscription
      - PgSubscription__Connection=dbname=${CATALOG_DB_NAME} host=${CATALOG_DB_HOST} user=${CATALOG_DB_USER} password=${CATALOG_DB_PASSWORD}
      - PgSubscription__PublicationName=catalog_publication
      - RabbitMQ__Username=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
    depends_on:
      rating-db:
        condition: service_healthy
  rating-db:
    image: postgres:17
    container_name: ${RATING_DB_HOST}
    environment:
      - POSTGRES_USER=${RATING_DB_USER}
      - POSTGRES_PASSWORD=${RATING_DB_PASSWORD}
      - POSTGRES_DB=${RATING_DB_NAME}
    expose: 
      - ${RATING_DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${RATING_DB_USER} -d ${RATING_DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - catalog-service
  image-service:
    build: ./ImageService
    container_name: ${IMAGE_HOST}
    expose:
      - ${IMAGE_PORT}
      - ${IMAGE_PORT_HTTP_2}
    environment:
      - Minio__Endpoint=${MINIO_HOST}:${MINIO_PORT}
      - Minio__AccessKey=${MINIO_ACCESS_KEY}
      - Minio__SecretKey=${MINIO_SECRET_KEY}
      - JWT__SigningKey=${JWT_SECRET_KEY}
      - HTTP_PORTS=${IMAGE_PORT}
      - HTTP_2_PORTS=${IMAGE_PORT_HTTP_2}
      - JWT__Issuer=https://localhost:7040
      - JWT__Audience=https://localhost:7040
    depends_on:
      minio:
        condition: service_healthy
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address "${MINIO_HOST}:${MINIO_CONSOLE_PORT}"
    container_name: ${MINIO_HOST}
    expose:
      - ${MINIO_PORT}
    ports:
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - ./minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_PORT}/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
  react-frontend:
    build: ./react-frontend
    container_name: ${REACT_HOST}
    environment:
      - PORT=${REACT_PORT}
      - REACT_APP_PUBLIC_URL=http://${API_GATEWAY_HOST}:${API_GATEWAY_PORT}/api/
    expose:
      - ${REACT_PORT}

volumes:
  minio-data: